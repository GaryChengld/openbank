<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <FaultRules>
        <FaultRule name="InvalidAccessToken">
            <Condition>(fault.name = "FailedToResolveAccessToken") or (fault.name = "InvalidTokenType") or (fault.name = "InvalidAccessToken") or (fault.name = "invalid_access_token") or (fault.name = "InvalidAPICallAsNoApiProductMatchFound") or (fault.name = "access_token_expired")</Condition>
            <Step>
                <FaultRules/>
                <Name>Fault.InvalidAccessToken</Name>
            </Step>
        </FaultRule>
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Name>OAuth.VerifyAccessToken</Name>
            </Step>
            <Step>
                <Name>Assign-Token-Details</Name>
                <!--<Condition>grant_type != "client_credentials"</Condition>-->
            </Step>
            <!--<Step>
                <Name>Fault.InvalidTransaction</Name>
                <Condition>grant_type != "client_credentials" and ((account_number = "") or (account_number = null) or (account_number = "acr:token"))</Condition>
            </Step>-->
            <Step>
                <Name>Extract.AccountNumber</Name>
                <!--<Condition>grant_type = "client_credentials"</Condition>-->
            </Step>
            <Step>
                <Name>assign-account-request</Name>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
    <PostFlow name="PostFlow">
        <Request>
            <Step>
                <Condition>((doVerification = true) or (InfoFlowVerified = true))</Condition>
                <Name>Fetch-Consent</Name>
            </Step>
            <Step>
                <Condition>((doVerification = true) or (InfoFlowVerified = true))</Condition>
                <Name>Consent-Data</Name>
            </Step>
            <Step>
                <Condition>(((doVerification = true) or (InfoFlowVerified = true) ) and (reqStatus != "Authorized"))</Condition>
                <Name>unauthorized-acc-req</Name>
            </Step>
            <Step>
                <Condition>(((doVerification = true) or (InfoFlowVerified = true)) and (accountIsValid = false))</Condition>
                <Name>fault-AccountInvalid</Name>
            </Step>
            <Step>
                <Condition>(((doVerification = true) or (InfoFlowVerified = true)) and (validPermissions = false))</Condition>
                <Name>Fault-Permission-Denied</Name>
            </Step>
            <Step>
                <Name>Assign-APIKey</Name>
            </Step>
        </Request>
        <Response>
            <Step>
                <Condition>((doVerification = true) or (InfoFlowVerified = true))</Condition>
                <Name>Create-Client-Data</Name>
            </Step>
        </Response>
    </PostFlow>
    <Flows>
        <Flow name="accountBalance">
            <Condition>((proxy.pathsuffix MatchesPath "/{account_number}/balance") or (proxy.pathsuffix MatchesPath "/balance") ) and (request.verb = "GET")</Condition>
            <Request>
                <!--<Step>
                    <Name>Fault.InvalidAccount</Name>
                    <Condition>grant_type = "client_credentials" and ((account_number = "") or (account_number = null) or (account_number = "acr:token"))</Condition>
                </Step>-->
                <Step>
                    <Condition>TokenType != "accounts"</Condition>
                    <Name>Fault-Invalid-Token-Type</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
        <Flow name="accountTransactions">
            <Condition>((proxy.pathsuffix MatchesPath "/{account_number}/transactions") or (proxy.pathsuffix MatchesPath "/{account_number}/transactions/{transaction_id}") or (proxy.pathsuffix MatchesPath "/transactions")) and (request.verb = "GET")
            </Condition>
            <Request>
                <!--<Step>
                    <Name>Fault.InvalidAccount</Name>
                    <Condition>grant_type = "client_credentials" and ((account_number = "") or (account_number = null) or (account_number = "acr:token"))</Condition>
                </Step>-->
                <Step>
                    <Condition>TokenType != "accounts"</Condition>
                    <Name>Fault-Invalid-Token-Type</Name>
                </Step>
                <Step>
                    <Name>Extract.TransactionId</Name>
                    <Condition>(proxy.pathsuffix MatchesPath "/{account_number}/transactions/{transaction_id}")</Condition>
                </Step>
            </Request>
            <Response/>
        </Flow>
        <Flow name="accountValidate">
            <Condition>(proxy.pathsuffix MatchesPath "/validate") and (request.verb = "POST")</Condition>
            <Request>
                <Step>
                    <Name>Fault.InvalidCCToken</Name>
                    <Condition>grant_type != "client_credentials"</Condition>
                </Step>
                <Step>
                    <Name>Extract.AccountValidateParams</Name>
                </Step>
                <Step>
                    <Name>Fault.BadRequest</Name>
                    <Condition>account_number == null or account_name == null or sort_code == null</Condition>
                </Step>
            </Request>
            <Response/>
        </Flow>
        <Flow name="accountBeneficiary">
            <Description/>
            <Request>
                <!--<Step>
                    <Condition>grant_type = "client_credentials" and ((account_number = "") or (account_number = null) or (account_number = "acr:token"))</Condition>
                    <Name>Fault.InvalidAccount</Name>
                </Step>-->
                <Step>
                    <Condition>TokenType != "accounts"</Condition>
                    <Name>Fault-Invalid-Token-Type</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>((proxy.pathsuffix MatchesPath "/{account_number}/beneficiaries") or (proxy.pathsuffix MatchesPath "/beneficiaries") ) and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="accountRequest">
            <Description/>
            <Request>
                <Step>
                    <Name>AssignUuid</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/accounts-requests")</Condition>
        </Flow>
        <Flow name="standingorders">
            <Description/>
            <Request>
                <!--<Step>
                    <Condition>grant_type = "client_credentials" and ((account_number = "") or (account_number = null) or (account_number = "acr:token"))</Condition>
                    <Name>Fault.InvalidAccount</Name>
                </Step>-->
                <Step>
                    <Condition>TokenType != "accounts"</Condition>
                    <Name>Fault-Invalid-Token-Type</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>((proxy.pathsuffix MatchesPath "/standing-orders") or (proxy.pathsuffix MatchesPath "/{account_number}/standing-orders")) and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="direct-debits">
            <Description/>
            <Request>
                <!--<Step>
                    <Condition>grant_type = "client_credentials" and ((account_number = "") or (account_number = null) or (account_number = "acr:token"))</Condition>
                    <Name>Fault.InvalidAccount</Name>
                </Step>-->
                <Step>
                    <Condition>TokenType != "accounts"</Condition>
                    <Name>Fault-Invalid-Token-Type</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>((proxy.pathsuffix MatchesPath "/direct-debits") or (proxy.pathsuffix MatchesPath "/{account_number}/direct-debits")) and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="accountInfo">
            <Condition>((proxy.pathsuffix MatchesPath "/{account_number}") or (proxy.pathsuffix MatchesPath "/") or (proxy.pathsuffix MatchesPath "/{account_number}/info")) and (request.verb = "GET")</Condition>
            <Request>
                <!--<Step>
                    <Name>Fault.InvalidAccount</Name>
                    <Condition>grant_type = "client_credentials" and ((account_number = "") or (account_number = null) or (account_number = "acr:token"))</Condition>
                </Step>-->
                <Step>
                    <Condition>TokenType != "accounts"</Condition>
                    <Name>Fault-Invalid-Token-Type</Name>
                </Step>
                <Step>
                    <Name>AssignIdentificationForAccInfo</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
    </Flows>
    <HTTPProxyConnection>
        <BasePath>/apis/v2/accounts</BasePath>
        <Properties/>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>